parameters:
  - name: VCPKG_COMMIT
    displayName: VCPKG commit
    type: string
    default: 2020.11-1
    values:
    - 2020.11-1
    - 2020.11
    - 2020.07
    - 2020.06
    - 2020.04
    - 2020.01
    - master

jobs:
- job: Build
  variables:
    VCPKG_REPOSITORY: https://github.com/Microsoft/vcpkg.git 
    VCPKG_OVERLAY_PORTS_REPOSITORY: https://github.com/NordicPlayground/vcpkg-overlay-ports-public
  strategy:
      matrix:
        linux:
          imageName: 'ubuntu-18.04'
          nodeArch: '64'
          VCPKG_ROOT_DIR: '$(Agent.HomeDirectory)/vcpkg'
          VCPKG_OVERLAY_PORTS_DIR: '$(Agent.HomeDirectory)/vcpkg-overlay-ports'
        mac:
          imageName: 'macos-10.15'
          nodeArch: '64'
          VCPKG_ROOT_DIR: '$(Agent.HomeDirectory)/vcpkg'
          VCPKG_OVERLAY_PORTS_DIR: '$(Agent.HomeDirectory)/vcpkg-overlay-ports'
        win64:
          imageName: 'vs2017-win2016'
          nodeArch: '64'
          driverArch: 'x64'
          VCPKG_ROOT_DIR: '$(Agent.HomeDirectory)\\vcpkg'
          VCPKG_OVERLAY_PORTS_DIR: '$(Agent.HomeDirectory)\\vcpkg-overlay-ports'
        win32:
          imageName: 'vs2017-win2016'
          nodeArch: '32'
          driverArch: 'x86'
          VCPKG_ROOT_DIR: '$(Agent.HomeDirectory)\\vcpkg'
          VCPKG_OVERLAY_PORTS_DIR: '$(Agent.HomeDirectory)\\vcpkg-overlay-ports'
  pool:
    vmImage: $(imageName)
  steps:
  - bash: |
      set -o errexit -o pipefail
      sudo apt-get update
      sudo apt-get install ninja-build libudev-dev
    condition: contains(variables['imageName'], 'ubuntu')
    displayName: '[Linux] Install toolchain'
  - bash: |
      # Note that installing gcc@6 will not change `gcc`/`g++` on
      # PATH, and those will still be Apple Clang.
      brew install ninja gcc@6
    condition: contains(variables['imageName'], 'mac')
    displayName: '[MacOS] Install toolchain'
  - bash: |
      choco install -y nvm
    condition: contains(variables['imageName'], 'win')
    displayName: '[Windows] Install toolchain'
  - bash: |
      set -o errexit -o pipefail
      export PATH=$VCPKG_ROOT:$PATH
      git clone $(VCPKG_REPOSITORY) $(VCPKG_ROOT_DIR) --branch ${{ parameters.VCPKG_COMMIT }} --depth 1
      git clone $(VCPKG_OVERLAY_PORTS_REPOSITORY) $(VCPKG_OVERLAY_PORTS_DIR) --depth 1
      CC=gcc-9 CXX=g++-9 $VCPKG_ROOT/bootstrap-vcpkg.sh
      echo "Using VCPKG_ROOT: $VCPKG_ROOT"
      echo "Using VCPKG_OVERLAY_PORTS: $VCPKG_OVERLAY_PORTS"
      ls -lart $VCPKG_OVERLAY_PORTS
      vcpkg install nrf-ble-driver
    env: {
      VCPKG_OVERLAY_PORTS: "$(VCPKG_OVERLAY_PORTS_DIR)/ports",
      VCPKG_ROOT: "$(VCPKG_ROOT_DIR)"
    }
    condition: contains(variables['imageName'], 'ubuntu')
    displayName: '[Linux] Install nrf-ble-driver'
  - bash: |
      set -o errexit -o pipefail
      export PATH=$VCPKG_ROOT:$PATH
      git clone $(VCPKG_REPOSITORY) $(VCPKG_ROOT_DIR) --branch ${{ parameters.VCPKG_COMMIT }} --depth 1
      git clone $(VCPKG_OVERLAY_PORTS_REPOSITORY) $(VCPKG_OVERLAY_PORTS_DIR) --depth 1
      # Vcpkg bootstap does not work with Apple Clang and it
      # refuses to use it. Explicitly point it to the GCC
      # installed in the "Install toolchain" in CC/CXX.
      CC=gcc-9 CXX=g++-9 $VCPKG_ROOT/bootstrap-vcpkg.sh
      vcpkg install nrf-ble-driver
    condition: contains(variables['imageName'], 'mac')
    displayName: '[MacOS] Install nrf-ble-driver'
    env: {
      VCPKG_OVERLAY_PORTS: "$(VCPKG_OVERLAY_PORTS_DIR)/ports",
      VCPKG_ROOT: "$(VCPKG_ROOT_DIR)"
    }
  - script: |
      set PATH=%VCPKG_ROOT%;%PATH%
      git clone $(VCPKG_REPOSITORY) $(VCPKG_ROOT_DIR) --branch ${{ parameters.VCPKG_COMMIT }} --depth 1
      git clone $(VCPKG_OVERLAY_PORTS_REPOSITORY) $(VCPKG_OVERLAY_PORTS_DIR) --depth 1
      %VCPKG_ROOT%\bootstrap-vcpkg.bat
    condition: contains(variables['imageName'], 'win')
    env: {
      VCPKG_OVERLAY_PORTS: "$(VCPKG_OVERLAY_PORTS_DIR)/ports",
      VCPKG_ROOT: "$(VCPKG_ROOT_DIR)"
    }
    displayName: '[Windows] Install vcpkg'
  - script: |
      set PATH=%VCPKG_ROOT%;%PATH%
      vcpkg install nrf-ble-driver:$(driverArch)-windows
    condition: contains(variables['imageName'], 'win')
    displayName: '[Windows] Install nrf-ble-driver'
    env: {
      VCPKG_OVERLAY_PORTS: "$(VCPKG_OVERLAY_PORTS_DIR)\\ports",
      VCPKG_ROOT: "$(VCPKG_ROOT_DIR)"
    }
  - template: azure-node.yml
    parameters:
      nodeVersion: 12.16.1
      nodeArch: $(nodeArch)
      npmConfigRuntime: 'node'
      npmConfigTarget: 12.16.1
      VCPKG_ROOT: $(VCPKG_ROOT_DIR)
  - template: azure-node.yml
    parameters:
      nodeVersion: 13.12.0
      nodeArch: $(nodeArch)
      npmConfigRuntime: 'node'
      npmConfigTarget: 13.12.0
      VCPKG_ROOT: $(VCPKG_ROOT_DIR)
  - template: azure-node.yml
    parameters:
      nodeVersion: 14.16.0
      nodeArch: $(nodeArch)
      npmConfigRuntime: 'node'
      npmConfigTarget: 14.16.0
      VCPKG_ROOT: $(VCPKG_ROOT_DIR)
  - template: azure-node.yml
    parameters:
      nodeVersion: 12.16.1
      nodeArch: $(nodeArch)
      npmConfigRuntime: 'electron'
      npmConfigTarget: 8.2.0
      VCPKG_ROOT: $(VCPKG_ROOT_DIR)
  - template: azure-node.yml
    parameters:
      nodeVersion: 12.16.1
      nodeArch: $(nodeArch)
      npmConfigRuntime: 'electron'
      npmConfigTarget: 9.0.3
      VCPKG_ROOT: $(VCPKG_ROOT_DIR)
  - template: azure-node.yml
    parameters:
      nodeVersion: 14.16.0
      nodeArch: $(nodeArch)
      npmConfigRuntime: 'electron'
      npmConfigTarget: 13.1.9
      VCPKG_ROOT: $(VCPKG_ROOT_DIR)
